#SVR model
#support vector regression
#y is a continous variable
from sklearn.svm import SVR
from sklearn.decomposition import PCA
from sklearn.metrics import mean_squared_error, r2_score

# svr training
svr = SVR(kernel='rbf', gamma=0.1, C=1.0)
svr.fit(X_train, y_train)

# evaluate the model and score
train_score = svr.score(X_train, y_train)
test_score = svr.score(X_test, y_test)

print('Training Score:', train_score)
print('Testing Score:', test_score)

#test
pca = PCA(n_components=3)
pca.fit(X_train)
X_tested = pca.transform(X_test)

# SVR configuration
svr = SVR(kernel='rbf', gamma=0.1, C=1.0)
svr.fit(X_train, y_train)

# SVR test
predictions = svr.predict(X_tested)
print('Predictions:', predictions)
print('Predictions\' shape:', predictions.shape)

#metric collection

y_pred = svr.predict(X_test)  # predictions using SVR

# calculate mean squared error
mse = mean_squared_error(y_test, y_pred)
print('Mean Squared Error (MSE):', mse)

# calculate r-squared score
r2 = r2_score(y_test, y_pred)
print('R-squared (R2) Score:', r2)
